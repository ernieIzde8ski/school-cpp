#!/usr/bin/env python3

"""
Quickly handles creating the next directory.
"""


if __name__ != "__main__":
    raise RuntimeError("mknext cannot be a module!")

import subprocess
from pathlib import Path
from typing import Iterable

from tap import Tap
import sys

if sys.stdout.isatty():
    from colors import blue
else:
    def blue(s, bg=None, style=None):
        return s


ROOT = Path(__file__).parent


def case_split(string: str) -> Iterable[str]:
    buffer = ""
    for s in string:
        if s.isupper():
            if buffer:
                yield buffer
            buffer = s.lower()
        else:
            buffer += s
    if buffer:
        yield buffer


class ProjectSettings(Tap):
    title: str
    """Folder name for new directory."""
    nonschool: bool = False
    """If is not a homework assignment."""
    modules: list[str] = []
    """Modules to include."""
    debug_settings: bool = False
    """Output Settings class without doing anything."""
    number: int = -1
    """Project number, minus one."""

    ## extra type validation and such
    def configure(self) -> None:
        # make arguments positional/aliased
        self.add_argument("title")
        self.add_argument("-N", "--nonschool")
        self.add_argument("-M", "--modules", nargs="*", default=[])
        self.add_argument("-D", "--debug-settings")

    def process_args(self) -> None:
        self.title = "-".join(case_split(self.title.strip())).lower().replace(" ", "-")
        
        # validate modules
        modules = ROOT / "modules"
        for i, module_name in enumerate(self.modules):
            if module_name.startswith("modules/"):
                self.modules[i] = module_name = module.removeprefix("modules/")
            if not module_name.endswith(".rs"):
                raise ValueError(f"Module name '{module_name}' does not seem like a Rust file")
            elif not (modules / module_name).exists():
                raise ValueError(f"Local path '{module_name}' does not seem to exist")
        
        if self.debug_settings:
            print(self)
            exit()

    def dirname(self, root=ROOT):
        """Generate folder path name for new project."""
        # basically you just need to get the current number,
        # increment by one, and append it to the title
        num = self.number

        if num == -1:
            folder_names = (
                i.name for i in root.iterdir() if i.is_dir() and i.name[:2].isnumeric()
            )
            for folder in folder_names:
                num = max(num, int(folder[:2]))

        # fstring majicks
        # number padding with 0 as fill for 2 characters
        return f"{num+1:02}-{self.title}"


settings = ProjectSettings(underscores_to_dashes=True).parse_args()

def execute_command(*args: str):
    print(blue("> Executing command: " + str(args)))
    proc = subprocess.run(args)
    if proc.returncode != 0:
        exit(proc.returncode)

target = settings.dirname()
execute_command("cargo", "new", target, "--name", settings.title)
for module in settings.modules:
    execute_command("ln", "-rs", "-T", f"modules/{module}", f"{target}/src/{module}")
