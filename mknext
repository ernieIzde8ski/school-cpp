#!/usr/bin/env python3

import sys
from datetime import datetime
from pathlib import Path
from typing import Iterable

from more_itertools import prepend
from tap import Tap


FILE_FORMAT_MAIN = """/*
    {STUDENT}
    {DATE}

    {DESCRIPTION}
*/


public class {CLASSNAME} <<
    // put code here
>>
"""

FILE_FORMAT_DEMO = """/*
    {STUDENT}
    {DATE}

    A demo of {CLASSNAME}.
*/

public class {CLASSNAME}Demo <<
    public static void main(String[] args) <<
        System.out.println("Hello, world");
    >>
>>
"""

# fmt: off
FILE_FORMAT_MAKEFILE = """run: *.java
    javac -encoding UTF-8 *.java
    java {CLASSNAME}Demo.java

format: *.java
    astyle -Oo --convert-tabs --max-code-length=90 --remove-braces \\
	--delete-empty-lines --pad-header *.java
""".replace("    ", "\t") 
# fmt: on


SRC = Path(__file__).with_name("src")
SRC.mkdir(exist_ok=True)


def generate_java(
    student: str, description: str, classname: str, date: str, fmt: str = FILE_FORMAT_MAIN
) -> str:
    return (
        fmt.format(
            STUDENT=student, DATE=date, DESCRIPTION=description, CLASSNAME=classname
        )
        .replace("<<", "{")
        .replace(">>", "}")
    )


def generate_Makefile(classname: str) -> str:
    return FILE_FORMAT_MAKEFILE.format(CLASSNAME=classname)


class ConsoleArgs(Tap):
    class_name: str
    folder_name: str = ""
    project_description: str = ""

    student_name: str = "Ernest Izdebski"
    debug: bool = False
    to_stdout: bool = False

    ### validation

    def configure(self) -> None:
        self.add_argument("class_name")
        self.add_argument("-F", "--folder-name")
        self.add_argument("-D", "--project-description")
        self.add_argument("-S", "--student-name")

    @staticmethod
    def camel_case_to_dash_split(text: str) -> str:
        resp = text[:1].lower()
        for s in text[1:]:
            if s.isupper():
                resp += "-"
                resp += s.lower()
            else:
                resp += s
        return resp

    @staticmethod
    def dash_split_to_camel_case(text: str) -> str:
        next_upper = True
        resp = str()
        for s in text:
            if s == "-":
                next_upper = True
            elif next_upper:
                resp += s.upper()
                next_upper = False
            else:
                resp += s
        return resp

    def process_args(self) -> None:
        class_name = self.class_name.strip().removesuffix(".java")

        # ensure folder_name exists
        if not self.folder_name:
            if "-" in class_name or " " in class_name:
                self.folder_name = class_name = class_name.lower().replace(" ", "-")
                self.class_name = self.dash_split_to_camel_case(class_name)
            else:
                self.class_name = class_name
                self.folder_name = self.camel_case_to_dash_split(class_name)

        # ensure project_description exists
        project_description = self.project_description.strip()
        while not project_description:
            print("description not given, reading from standard input", file=sys.stderr)
            project_description = sys.stdin.read().strip()

        # make project description lines a bit less long
        if len(project_description) > 90:
            import textwrap

            self.project_description = "\n    ".join(
                textwrap.wrap(project_description, width=70)
            )
        else:
            self.project_description = project_description


def get_directory_numbers() -> Iterable[int]:
    for dir in SRC.iterdir():
        if not dir.is_dir():
            continue
        n = dir.name.split(":", 1)[:1]
        if n and n[0].isnumeric():
            yield int(n[0])


def get_target_dir(name: str) -> Path:
    # gets a number that is at least zero
    num = max(prepend(-1, get_directory_numbers())) + 1
    name = str(num).rjust(2, "0") + ":" + name
    return SRC / name


def main():
    args = ConsoleArgs(underscores_to_dashes=True).parse_args()

    if args.debug:
        print(args, file=sys.stderr)
        exit(0)

    date = datetime.now().strftime(r"%Y-%m-%d")

    file_contents = {
        f"{args.class_name}.java": generate_java(
            student=args.student_name,
            description=args.project_description,
            classname=args.class_name,
            date=date,
            fmt=FILE_FORMAT_MAIN,
        ),
        f"{args.class_name}Demo.java": generate_java(
            student=args.student_name,
            description=args.project_description,
            classname=args.class_name,
            date=date,
            fmt=FILE_FORMAT_DEMO,
        ),
        "Makefile": generate_Makefile(classname=args.class_name),
    }

    if args.to_stdout:
        for k, v in file_contents.items():
            print("┌" + ("─" * 19))
            print("│", k)
            print("│\n")
            print(v)
        exit(0)

    target_dir = get_target_dir(args.folder_name)
    target_dir.mkdir()

    for fp, contents in file_contents.items():
        (target_dir / fp).write_text(contents)
        print("Wrote to", fp, file=sys.stderr)

    print("All done!", file=sys.stderr)


if __name__ == "__main__":
    main()
